cmake_minimum_required(VERSION 3.5)
project(wasm-instrumentation VERSION 0.1.0)
aux_source_directory(${CMAKE_CURRENT_LIST_DIR}/src sources)
set(CMAKE_CXX_STANDARD 17)
include(CMakeModules/AddWarningFlags.cmake)
include(CTest)
set(JSONCPP_WITH_TESTS false)
enable_testing()
add_subdirectory(test)
add_subdirectory(thirdparty/binaryen)
add_subdirectory(thirdparty/jsoncpp)

if (EMSCRIPTEN)
    add_executable(wasm-instrumentation main.cpp ${sources})
    target_link_libraries(wasm-instrumentation "-sSINGLE_FILE")
    target_link_libraries(wasm-instrumentation "-sFORCE_FILESYSTEM")
    target_link_libraries(wasm-instrumentation "-sALLOW_MEMORY_GROWTH")
    # target_link_libraries(wasm-instrumentation "-sINITIAL_MEMORY=33554432")
    target_link_libraries(wasm-instrumentation "-sNODERAWFS=1")
    target_link_libraries(wasm-instrumentation "-sENVIRONMENT=node")
    target_link_libraries(wasm-instrumentation "-sSTACK_SIZE=4mb")
    target_link_libraries(wasm-instrumentation "-sMODULARIZE=1")
    target_link_libraries(wasm-instrumentation "-sEXPORT_NAME=initInstrumenter")
    target_link_libraries(wasm-instrumentation "-sEXPORT_ES6=1")
    target_link_libraries(wasm-instrumentation "-sEXPORTED_RUNTIME_METHODS=allocateUTF8")
    target_link_libraries(wasm-instrumentation "-sEXPORTED_FUNCTIONS=_malloc,_free")
    target_link_libraries(wasm-instrumentation "-mbulk-memory")
else()
    add_compile_flag("-fno-rtti")
    if(ENABLE_CLANG_TIDY)
        set(CMAKE_CXX_CLANG_TIDY clang-tidy -extra-arg=-std=gnu++${CMAKE_CXX_STANDARD} --config-file ${CMAKE_CURRENT_SOURCE_DIR}/.clang-tidy --header-filter=${CMAKE_CURRENT_SOURCE_DIR}/[src|test]*.*hpp)
        if(ENABLE_WERROR)
            set(CMAKE_CXX_CLANG_TIDY ${CMAKE_CXX_CLANG_TIDY} -warnings-as-errors=*)
        endif()
    endif()
    if(ENABLE_SANITIZE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address,undefined,pointer-compare")
	endif()
    add_executable(wasm-instrumentation main.cpp ${sources})
    add_warning_flag_to_target(wasm-instrumentation)
endif()
set(BUILD_TESTS 0)
set(JSONCPP_WITH_TESTS OFF)
set(BUILD_STATIC_LIBS ON)
set(BUILD_SHARED_LIBS OFF)
set(BUILD_OBJECT_LIBS OFF)

target_link_libraries(wasm-instrumentation binaryen jsoncpp_static)
target_include_directories(wasm-instrumentation SYSTEM PRIVATE ${CMAKE_CURRENT_LIST_DIR}/thirdparty/binaryen/src ${CMAKE_CURRENT_LIST_DIR}/thirdparty/jsoncpp/include)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
